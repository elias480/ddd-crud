#!/usr/bin/ruby
# Encoding: utf-8

message_file = ARGV[0]

def check_format_rules(line)
  print(line)
  errors = []
  conventions = ['feat', 'fix', 'build', 'chore', 'ci', 'docs', 'style', 'refactor', 'perf', 'test']
  conventional_commit_conventions = conventions.map{|x| Regexp.new '(^' + x + ')' + '(\(.*\))?!?: [\w+\D\-\d+]'}
  conventional_commit_check = conventional_commit_conventions.map{|x| line.match(x)}.compact
  if conventional_commit_check.empty?
    unless line.include?('HOTFIX')
      errors << "\t🕵️  Error: Your custom commit doesn't seem like following conventional commit rules."
      errors << "\t📖 Check https://www.conventionalcommits.org"
    end
  end
  errors << "\t✂️ Error: Your subject contains #{line.split(':')[1].length} characters. Subject should be less than 50 characters" if line.split(']')[1]&.length.to_i > 50
  errors << "\t🔠 Error: Commit message subject should start in Capital." if line.split(']')[1] && line.split(']')[1].lstrip[0] == line.split(']')[1].lstrip[0].downcase
  return errors
end

def check_is_conventional(message_file)
  errors = []
  line = File.open(message_file, 'r') {|f| f.readline}
  errors = check_format_rules line.strip
  return errors
end

def error_block(errors)
  print("\n\t✋ Invalid commit format. Exiting commit.\n")
  print errors.join("\n")
  print("\n\n")
end

def validate_commit(message_file)
  commit_errors = check_is_conventional(message_file)
  if commit_errors.empty?
    exit 0
  else
    error_block(commit_errors)
    exit 1
  end
end

while true
  validate_commit(message_file)
end
