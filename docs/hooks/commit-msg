#!/usr/bin/ruby
# Encoding: utf-8

message_file = ARGV[0]

current_branch = %x(git rev-parse --abbrev-ref HEAD).sub("\n","")

# repo_url = %x(git config --get remote.origin.url).sub(".git\n", '')

def check_format_rules(line_number, line)
  errors = []
  unless line_number > 0
      conventions = ['feat', 'fix', 'build', 'chore', 'ci', 'docs', 'style', 'refactor', 'perf', 'test']
      conventional_commit_conventions = conventions.map{|x| Regexp.new '(^' + x + ')' + '(\(.*\))?!?: [\w+\D\-\d+]'}
      conventional_commit_check = conventional_commit_conventions.map{|x| line.match(x)}.compact
      if conventional_commit_check.empty?
        unless line.include?('HOTFIX')
          errors << "\tError: Your custom commit doesn't seem like following conventional commit rules."
          errors << "\tCheck https://www.conventionalcommits.org"
        end
      end
      errors << "\tError: Your subject contains #{line.split(':')[1].length} characters. Subject should be less than 50 characters" if line.split(']')[1]&.length.to_i > 50
      errors << "\tError: Commit message subject should start in Capital." if line.split(']')[1] && line.split(']')[1].lstrip[0] == line.split(']')[1].lstrip[0].downcase
  end
  return errors
end

def check_is_conventional(message_file)
  errors = []
  File.open(message_file, 'r').each_with_index do |line, line_number|
    errors = check_format_rules line_number, line.strip
  end
  return errors
end

def error_block(errors)
  print("\nâœ‹ Invalid commit format. Exiting commit.\n")
  print errors.join("\n")
  print("\n\n")
end

def validate_commit(current_branch, message_file)
  commit_errors = check_is_conventional(message_file)
  if commit_errors.empty?
    exit 0
  else
    error_block(commit_errors)
    exit 1
  end
end

while true
  validate_commit(current_branch, message_file)
end
